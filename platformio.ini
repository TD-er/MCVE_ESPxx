;
; PlatformIO Project Configuration File
;
; Please make sure to read documentation with examples first
; http://docs.platformio.org/en/stable/projectconf.html
;

; *********************************************************************;
; You can uncomment or add here Your favorite environment you want to work on at the moment
; (uncomment only one !)
; *********************************************************************;

[platformio]
description   = Firmware for ESP82xx/ESP32/ESP32-S2/ESP32-S3/ESP32-C3 for easy IoT deployment of sensors.
boards_dir    = boards
lib_dir       = lib
default_envs  = MCVE_ESP32_4M316k_LittleFS


; *********************************************************************

; **** Definition cheat sheet:
; board_build.flash_mode in terms of performance: QIO > QOUT > DIO > DOUT
; for lib_ldf_mode, see http://docs.platformio.org/en/latest/librarymanager/ldf.html;ldf

; **** Frequently used build flags:
; Use custom.h file to override default settings for ESPeasy: -D USE_CUSTOM_H
; Set VCC mode to measure Vcc of ESP chip :                   -D FEATURE_ADC_VCC=1

; Build Flags:
;  -DUSE_CONFIG_OVERRIDE
; lwIP 1.4 (Default)
;  -DPIO_FRAMEWORK_ARDUINO_LWIP_HIGHER_BANDWIDTH
; lwIP 2 - Low Memory
;  -DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY
; lwIP 2 - Higher Bandwitdh
;  -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH
; VTABLES in Flash (default)
;  -DVTABLES_IN_FLASH
; VTABLES in Heap
;  -DVTABLES_IN_DRAM
; VTABLES in IRAM
;  -DVTABLES_IN_IRAM
; NO_EXTRA_4K_HEAP - this forces the default NONOS-SDK user's heap location
;     Default currently overlaps cont stack (Arduino) with sys stack (System)
;     to save up-to 4 kB of heap. (starting core_2.4.2)
; ESP8266_DISABLE_EXTRA4K  - Calls disable_extra4k_at_link_time() from setup
;                            to force the linker keep user's stack in user ram.
; CONT_STACKSIZE to set the 'cont' (Arduino) stack size. Default = 4096
; -mtarget-align  see: https://github.com/arendst/Sonoff-Tasmota/issues/3678#issuecomment-419712437

[esp82xx_defaults]
build_flags               = -D NDEBUG
                            -lstdc++ -lsupc++
                            -mtarget-align
                            -DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY
                            -DVTABLES_IN_FLASH
                            -DPUYA_SUPPORT=1
                            -DDISABLE_SC16IS752_SPI
                            -DCRON_USE_LOCAL_TIME
                            -fno-strict-aliasing
;                            -I$PROJECT_DIR/src/include
;                            -include "ESPEasy_config.h"

lib_ignore                = ESP32_ping
                            ESP32WebServer
                            ESP32HTTPUpdateServer
                            ServoESP32
                            IRremoteESP8266
                            HeatpumpIR
                            TinyWireM
                            ESP8266SdFat
                            SD(esp8266)
                            SD
                            SDFS
                            LittleFS(esp8266)
                            LittleFS
                            ArduinoOTA
                            ESP8266mDNS
                            I2C AXP192 Power management
;                            EspSoftwareSerial



; Keep optimization flag to -O2
; See: https://github.com/platformio/platform-espressif8266/issues/288
; For "-fno-strict-aliasing"
; See: https://github.com/esp8266/Arduino/issues/8261
[esp82xx_2_7_x]
build_flags               = -DNDEBUG
                            -mtarget-align
                            -DVTABLES_IN_FLASH
                            -fno-exceptions
                            -lstdc++
                            -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
                            -DPUYA_SUPPORT=1
                            -DCORE_POST_2_5_0
                            -DDISABLE_SC16IS752_SPI
                            -DCRON_USE_LOCAL_TIME
                            -fno-strict-aliasing
                            -DLIBRARIES_NO_LOG=1
                            -DNO_GLOBAL_I2S
;                            -I$PROJECT_DIR/src/include
;                            -include "ESPEasy_config.h"
                            -O2
                            -s
                            -DBEARSSL_SSL_BASIC
                            -DCORE_POST_2_6_0 
                            ; remove the 4-bytes alignment for PSTR()
                            -DPSTR_ALIGN=1
                            -Werror=return-type
lib_ignore                = ${esp82xx_defaults.lib_ignore}
                            EspSoftwareSerial


[esp82xx_3_0_x]
build_flags               = ${esp82xx_2_7_x.build_flags} 
                            -DCORE_POST_3_0_0
                            -Wno-deprecated-declarations
;                            -flto=auto
;                            -Wl,-flto
build_unflags             = -DDEBUG_ESP_PORT
                            -fexceptions
                            -Wall
;                            -fno-lto
lib_ignore                = ${esp82xx_defaults.lib_ignore}
extra_scripts             = pre:tools/pio/pre_custom_esp8266_toolchain.py



; See for SDK flags: https://github.com/esp8266/Arduino/blob/master/tools/platformio-build.py

[core_2_7_4]
extends                   = esp82xx_2_7_x
platform                  = espressif8266@2.6.3
platform_packages         =
	framework-arduinoespressif8266 @ https://github.com/esp8266/Arduino.git#2.7.4
build_flags               = ${esp82xx_2_7_x.build_flags} 
                            -DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703
                            -DUSES_LATEST_SOFTWARE_SERIAL_LIBRARY=0
                            -Wno-deprecated-declarations
                            -DLIBRARIES_NO_LOG=1
lib_ignore                = ${esp82xx_2_7_x.lib_ignore}


[core_stage]
extends                   = esp82xx_3_0_x
platform                  = espressif8266@4.2.1
platform_packages         = 
build_flags               = ${esp82xx_3_0_x.build_flags}
                            -DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK3
                            -DUSES_LATEST_SOFTWARE_SERIAL_LIBRARY=1
                            -DLIBRARIES_NO_LOG=1
                            -DPHASE_LOCKED_WAVEFORM
build_unflags             = ${esp82xx_3_0_x.build_unflags}
lib_ignore                = ${esp82xx_defaults.lib_ignore}



; See: https://arduino-esp8266.readthedocs.io/en/latest/mmu.html
[core_stage_2ndheap]
extends                   = esp82xx_3_0_x
platform                  = espressif8266@4.2.1
platform_packages         = 
build_flags               = ${esp82xx_3_0_x.build_flags}
                            -DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK3
                            -DUSES_LATEST_SOFTWARE_SERIAL_LIBRARY=1
                            -DLIBRARIES_NO_LOG=1
                            -DPHASE_LOCKED_WAVEFORM
                            -DPIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48_SECHEAP_SHARED
                            -DUSE_SECOND_HEAP
build_unflags             = ${esp82xx_3_0_x.build_unflags}
lib_ignore                = ${core_stage.lib_ignore}



; Updated ESP-IDF to the latest stable 4.0.1
; See: https://github.com/platformio/platform-espressif32/releases
; IDF 4.4 = platform-espressif32 3.4.x = espressif/arduino-esp32 tag 2.0.4
; Just for those who lost track of the extremely confusing numbering schema.
; For MUSTFIX_CLIENT_TIMEOUT_IN_SECONDS See: https://github.com/espressif/arduino-esp32/pull/6676
[core_esp32_IDF4_4__2_0_14]
platform                    = https://github.com/tasmota/platform-espressif32/releases/download/2023.10.03/platform-espressif32.zip
platform_packages           = framework-arduinoespressif32 @ https://github.com/Jason2866/esp32-arduino-lib-builder/releases/download/1645/framework-arduinoespressif32-release_v4.4_spiffs-e3fc63b439.zip
build_flags                 = -DESP32_STAGE
                              -DESP_IDF_VERSION_MAJOR=4
                              -DMUSTFIX_CLIENT_TIMEOUT_IN_SECONDS
                              -DLIBRARIES_NO_LOG=1
                              -DDISABLE_SC16IS752_SPI
                              -DCONFIG_PM_ENABLE
                              -DCONFIG_FREERTOS_USE_TICKLESS_IDLE=1
                              -DCONFIG_FREERTOS_IDLE_TIME_BEFORE_SLEEP=3
                              -DNEOPIXEL_ESP32_RMT_DEFAULT
                              -DCRON_USE_LOCAL_TIME
;                              -I$PROJECT_DIR/src/include
;                              -include "sdkconfig.h"
;                              -include "ESPEasy_config.h"
;                              -include "esp32x_fixes.h"
lib_ignore =

; ESP_IDF 5.1
[core_esp32_IDF5_1__3_0_0]
;platform                    = https://github.com/Jason2866/platform-espressif32.git
platform                    = https://github.com/tasmota/platform-espressif32/releases/download/2024.02.10/platform-espressif32.zip
;platform_packages           = 
;platform_packages           = framework-arduinoespressif32 @ https://github.com/Jason2866/esp32-arduino-lib-builder/releases/download/2119/framework-arduinoespressif32-release_v5.1-a28d368.zip
;platform_packages           = framework-arduinoespressif32 @ https://github.com/Jason2866/esp32-arduino-lib-builder/releases/download/2180/framework-arduinoespressif32-all-release_v5.1-735d740.zip
platform_packages           = framework-arduinoespressif32 @ https://github.com/Jason2866/esp32-arduino-lib-builder/releases/download/2189/framework-arduinoespressif32-all-release_v5.1-be1a568.zip
build_flags                 = -DESP32_STAGE
                              -DESP_IDF_VERSION_MAJOR=5
                              -DLIBRARIES_NO_LOG=1
                              -DDISABLE_SC16IS752_SPI
                              -DCONFIG_PM_ENABLE
;                              -DCONFIG_LWIP_L2_TO_L3_COPY
                              -DETH_SPI_SUPPORTS_NO_IRQ=1
                              -DCONFIG_FREERTOS_USE_TICKLESS_IDLE=1
                              -DCONFIG_FREERTOS_IDLE_TIME_BEFORE_SLEEP=3
                              -DNEOPIXEL_ESP32_RMT_DEFAULT
                              -DCRON_USE_LOCAL_TIME
                              -I$PROJECT_DIR/src/include
                              -include "sdkconfig.h"
                              -include "ESPEasy_config.h"
                              -include "esp32x_fixes.h"
lib_ignore = 
      





[esp32_base]
extends                   = common, core_esp32_IDF4_4__2_0_14
upload_speed              = 460800
upload_before_reset       = default_reset
upload_after_reset        = hard_reset
extra_scripts             = post:tools/pio/post_esp32.py
; you can disable debug linker flag to reduce binary size (comment out line below), but the backtraces will become less readable
;                            tools/pio/extra_linker_flags.py
; fix the platform package to use gcc-ar and gcc-ranlib to enable lto linker plugin
; more detail: https://embeddedartistry.com/blog/2020/04/13/prefer-gcc-ar-to-ar-in-your-buildsystems/
;                            pre:tools/pio/apply_patches.py
build_unflags             = -Wall
;                            -fno-lto
build_flags               = ${core_esp32_IDF4_4__2_0_14.build_flags}
;                            ${mqtt_flags.build_flags}
                            -DMQTT_MAX_PACKET_SIZE=2048
                            -DCONFIG_FREERTOS_ASSERT_DISABLE
                            -DCONFIG_LWIP_ESP_GRATUITOUS_ARP
                            -fno-strict-aliasing
;                            -flto
                            -Wswitch
                            -DCORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_NONE
monitor_filters           = esp32_exception_decoder
lib_ignore                = 
                            ${core_esp32_IDF4_4__2_0_14.lib_ignore}


[esp32_base_idf5]
extends                   = common, core_esp32_IDF5_1__3_0_0
upload_speed              = 460800
upload_before_reset       = default_reset
upload_after_reset        = hard_reset
extra_scripts             = post:tools/pio/post_esp32.py
; you can disable debug linker flag to reduce binary size (comment out line below), but the backtraces will become less readable
;                            tools/pio/extra_linker_flags.py
; fix the platform package to use gcc-ar and gcc-ranlib to enable lto linker plugin
; more detail: https://embeddedartistry.com/blog/2020/04/13/prefer-gcc-ar-to-ar-in-your-buildsystems/
;                            pre:tools/pio/apply_patches.py

; When using LTO, make sure NOT to use -mtext-section-literals
; -mtext-section-literals may be required when building large builds
; However LTO cannot optimize builds with text section literals and thus will result in quite a lot larger builds (80k - 140k larger)
build_unflags             = -Wall
                            -fexceptions
build_flags               = ${core_esp32_IDF5_1__3_0_0.build_flags}
;                            ${mqtt_flags.build_flags}
                            -DMQTT_MAX_PACKET_SIZE=2048
                            -DCONFIG_FREERTOS_ASSERT_DISABLE
                            -DCONFIG_LWIP_ESP_GRATUITOUS_ARP
                            -fno-strict-aliasing
                            -Wswitch
;                            -DCORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_NONE
;                            -DCORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_INFO
                            -DCORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_VERBOSE
;                            -DLWIP_IPV6
monitor_filters           = esp32_exception_decoder
lib_ignore                = 
                            ${core_esp32_IDF5_1__3_0_0.lib_ignore}



[esp32s2_common_LittleFS]
extends                   = esp32_base_idf5
build_flags               = ${esp32_base_idf5.build_flags}
                            -DFEATURE_ARDUINO_OTA=1
                            -DUSE_LITTLEFS
                            -DESP32S2
extra_scripts             = ${esp32_base_idf5.extra_scripts}
board_build.filesystem    = littlefs

[esp32s2_common]
extends                   = esp32_base
build_flags               = ${esp32_base.build_flags}
                            -DFEATURE_ARDUINO_OTA=1
                            -DESP32S2
extra_scripts             = ${esp32_base.extra_scripts}


[esp32s3_common_LittleFS]
extends                   = esp32_base_idf5
lib_ignore                = ${esp32_common_LittleFS.lib_ignore}
                            ESP32_ping
                            ${esp32_base_idf5.lib_ignore}
build_flags               = ${esp32_base_idf5.build_flags}
;                            -mtext-section-literals
                            -DFEATURE_ARDUINO_OTA=1
                            -DUSE_LITTLEFS
                            -DESP32S3
extra_scripts             = ${esp32_base_idf5.extra_scripts}
board_build.filesystem    = littlefs


[esp32c2_common_LittleFS]
extends                   = esp32_base_idf5
build_flags               = ${esp32_base_idf5.build_flags}
                            -DFEATURE_ARDUINO_OTA=1
                            -DUSE_LITTLEFS
                            -DESP32C2
extra_scripts             = ${esp32_base_idf5.extra_scripts}
board_build.filesystem    = littlefs
lib_ignore                = ${esp32_base_idf5.lib_ignore}
                            NeoPixelBus
                            NeoPixelBus_wrapper
                            Adafruit NeoMatrix via NeoPixelBus

[esp32c3_common_LittleFS]
extends                   = esp32_base_idf5
build_flags               = ${esp32_base_idf5.build_flags}
                            -DFEATURE_ARDUINO_OTA=1
                            -DUSE_LITTLEFS
                            -DESP32C3
extra_scripts             = ${esp32_base_idf5.extra_scripts}
board_build.filesystem    = littlefs




[esp32c6_common_LittleFS]
extends                   = esp32_base_idf5
build_flags               = ${esp32_base_idf5.build_flags}
                            -DFEATURE_ARDUINO_OTA=1
                            -DUSE_LITTLEFS
                            -DESP32C6
extra_scripts             = ${esp32_base_idf5.extra_scripts}
board_build.filesystem    = littlefs
lib_ignore                = ${esp32_base_idf5.lib_ignore}
                            NeoPixelBus
                            NeoPixelBus_wrapper
                            Adafruit NeoMatrix via NeoPixelBus
board                     = esp32c6cdc



; -flto cannot be used for ESP32 C3!
; See: https://github.com/letscontrolit/ESPEasy/pull/3845#issuecomment-1014857366
; TD-er: 2022-01-20: Disabled for now as it also resulted in obscure linker errors on ESP32-S2 and ESP32 running custom builds.
;build_flags               = ${esp32_base.build_flags}
;                            -flto
;build_unflags             = ${esp32_base.build_unflags}
;                            -fexceptions
;                            -fno-lto


[esp32_always]
lib_ignore                = ESP8266Ping
                            ESP8266HTTPUpdateServer
                            ESP8266WiFi
                            ESP8266WebServer
                            ESP8266mDNS
                            ESPEasy_ESP8266Ping
                            RABurton ESP8266 Mutex
                            TinyWireM
                            LittleFS_esp32
                            Adafruit NeoPixel
                            ${esp32_base.lib_ignore}


[esp32_common]
extends                   = esp32_base
lib_ignore                = ${esp32_always.lib_ignore}
                            ESP32_ping
                            ESP32 BLE Arduino
build_flags               = ${esp32_base.build_flags}
                            -DESP32_CLASSIC
extra_scripts             = ${esp32_base.extra_scripts}
build_unflags             = ${esp32_base.build_unflags}
                            -fexceptions

[esp32_common_LittleFS]
extends                   = esp32_base_idf5
build_flags               = ${esp32_base_idf5.build_flags}
;                            -mtext-section-literals
                            -DESP32_CLASSIC
                            -DUSE_LITTLEFS
extra_scripts             = ${esp32_common.extra_scripts}
board_build.filesystem    = littlefs
lib_ignore                = ${esp32_always.lib_ignore}
                            ESP32_ping
                            ESP32 BLE Arduino
                            ${core_esp32_IDF5_1__3_0_0.lib_ignore}



[common]
lib_archive               = false
lib_ldf_mode              = chain
lib_compat_mode           = strict
shared_libdeps_dir        = lib
framework                 = arduino
upload_speed              = 115200
monitor_speed             = 115200
;targets                   = size, checkprogsize
targets                   =

[env]
extends                   = common


[regular_platform]
build_unflags             =
build_flags               = ${core_2_7_4.build_flags}
platform                  = ${core_2_7_4.platform}
platform_packages         = ${core_2_7_4.platform_packages}

[beta_platform]
build_unflags             =
build_flags               = ${core_stage.build_flags}
platform                  = ${core_stage.platform}
platform_packages         = ${core_stage.platform_packages}

[packages_platform]
build_unflags             =
build_flags               = ${core_2_7_4.build_flags}
platform                  = ${core_2_7_4.platform}
platform_packages         = ${core_2_7_4.platform_packages}



[esp8266_4M1M]
board                     = esp12e
board_build.flash_mode    = dio
board_upload.maximum_size = 1044464
build_unflags             = ${regular_platform.build_unflags}
build_flags               = -Wl,-Tesp8266.flash.4m1m.ld

; Environment for very simple build tests to assist in reporting issues.
[env:MCVE_ESP8266_4M1M]
platform                  = ${core_stage.platform}
platform_packages         = ${core_stage.platform_packages}
extends                   = esp8266_4M1M
build_unflags             = ${esp8266_4M1M.build_unflags} ${core_stage.build_unflags}
build_flags               = ${esp8266_4M1M.build_flags} ${core_stage.build_flags} -DPLUGIN_BUILD_CUSTOM
lib_ignore                = ${core_stage.lib_ignore}
extra_scripts             = pre:pre_extra_script_mcve.py


[env:MCVE_ESP32_4M316k_LittleFS]
extends                   = esp32_common_LittleFS
board                     = esp32_4M
build_flags               = ${esp32_common_LittleFS.build_flags}
                            -DPLUGIN_BUILD_CUSTOM
extra_scripts             = pre:pre_extra_script_mcve.py


[env:MCVE_ESP32s2_4M316k_LittleFS_CDC]
extends                   = esp32s2_common_LittleFS
board                     = esp32s2cdc
lib_ignore                = ${esp32s2_common_LittleFS.lib_ignore}
build_flags               = ${esp32s2_common_LittleFS.build_flags}
                            -DPLUGIN_BUILD_CUSTOM
                            -DESP_CONSOLE_USB_CDC=y
extra_scripts             = pre:pre_extra_script_mcve.py

[env:MCVE_ESP32s2_4M316k_CDC]
extends                   = esp32s2_common
board                     = esp32s2cdc
lib_ignore                = ${esp32s2_common.lib_ignore}
build_flags               = ${esp32s2_common.build_flags}
                            -DPLUGIN_BUILD_CUSTOM
                            -DESP_CONSOLE_USB_CDC=y
extra_scripts             = pre:pre_extra_script_mcve.py


[env:MCVE_ESP32s2_4M316k]
extends                   = esp32s2_common
board                     = esp32s2
lib_ignore                = ${esp32s2_common.lib_ignore}
build_flags               = ${esp32s2_common.build_flags}
                            -DPLUGIN_BUILD_CUSTOM
                            -DESP_CONSOLE_USB_CDC=y
extra_scripts             = pre:pre_extra_script_mcve.py

[env:MCVE_ESP32s3_4M316k_LittleFS_CDC]
extends                   = esp32s3_common_LittleFS
board                     = esp32s3cdc-qio_qspi
lib_ignore                = ${esp32s3_common_LittleFS.lib_ignore}
build_flags               = ${esp32s3_common_LittleFS.build_flags}  
                            -DPLUGIN_BUILD_CUSTOM
extra_scripts             = pre:pre_extra_script_mcve.py

[env:MCVE_ESP32s3_4M316k_PSRAM_LittleFS_CDC]
extends                   = esp32s3_common_LittleFS
board                     = esp32s3cdc-qio_opi-16M
lib_ignore                = ${esp32s3_common_LittleFS.lib_ignore}
build_flags               = ${esp32s3_common_LittleFS.build_flags}  
                            -DPLUGIN_BUILD_CUSTOM
extra_scripts             = pre:pre_extra_script_mcve.py


[env:MCVE_ESP32c2_4M316k_LittleFS]
extends                   = esp32c2_common_LittleFS
board                     = esp32c2
build_flags               = ${esp32c2_common_LittleFS.build_flags} 
                            -DPLUGIN_BUILD_CUSTOM
extra_scripts             = pre:pre_extra_script_mcve.py



[env:MCVE_ESP32c3_4M316k_LittleFS_CDC]
extends                   = esp32c3_common_LittleFS
board                     = esp32c3cdc
lib_ignore                = ${esp32c3_common_LittleFS.lib_ignore}
                            -DPLUGIN_BUILD_CUSTOM
extra_scripts             = pre:pre_extra_script_mcve.py



[env:MCVE_ESP32c6_4M316k_LittleFS_CDC]
extends                   = esp32c6_common_LittleFS
build_flags               = ${esp32c6_common_LittleFS.build_flags} 
                            -DPLUGIN_BUILD_CUSTOM
extra_scripts             = pre:pre_extra_script_mcve.py




